Screen2D: Set Background Texture
> PARAM {
  key=project-data
  obtain=obtain-project-data
    > SYMBOL_DIALOG {
      message=Select the project data type
      symbol_type=struct
      target_result_type=name
      target_context_property=project-data
    }
}
> PARAM {
  key=tex-field-name
  obtain=set-tex-field-name
    > FUNCTION {
      MCcall(mc_mo_set_top_context_cstr(process_stack, "tex-field-name", "tex_background"));
    }
}
> FUNCTION {
  const char *data_name, *tex_fn;
  MCcall(mc_mo_get_context_cstr(process_stack, "project-data", true, &data_name));
  MCcall(mc_mo_get_context_cstr(process_stack, "tex-field-name", true, &tex_fn));

  // Get the data struct
  struct_info *si = NULL;
  MCcall(find_struct_info(data_name, &si));
  if(!si) {
    MCerror(7563, "TODO");
  }

  // Insert the texture field into the data
  MCcall(mcs_append_field_to_struct(si, "mcr_texture_image", 1, tex_fn));
}
> PARAM {
  key=project-init-source-filepath
  obtain=required-context
    > MESSAGE_BOX {
      message=NotYetImplemented
    }
}
> PARAM {
  key=project-init-header-filepath
  obtain=required-context
    > MESSAGE_BOX {
      message=NotYetImplemented
    }
}
> PARAM {
  key=project-load-resources-function
  obtain=required-context
    > FUNCTION {
      // Check if a load-resources function exists, and if not, create it
      char lrcn_buf[64], buf[512];
      const char *lrcn, *init_function_name, *data_name;
      function_info *fi, *init_fi;
      char param[64];

      MCcall(mc_mo_get_context_cstr(process_stack, "project-load-resources-function", true, &lrcn));
      if(!lrcn) {
        // Create the function
        // -- Obtain the project name
        MCcall(mc_mo_get_context_cstr(process_stack, "project-name", true, &lrcn));
        if(!lrcn) {
          puts("Error - require project-name context to initailize the load_resources function");
          return 8;
        }

        // -- Make the function name
        sprintf(lrcn_buf, "_%s_load_resources", lrcn);
        lrcn = lrcn_buf;

        // -- Obtain the init source file name
        const char *init_source_filepath;
        MCcall(mc_mo_get_context_cstr(process_stack, "project-init-source-filepath", true, &init_source_filepath));
        if(!init_source_filepath) {
          return 9;
        }
        mc_source_file_info *init_source_file;
        MCcall(mcs_obtain_source_file_info(init_source_filepath, true, &init_source_file));
        if(!init_source_file)
          return 10;
        
        // -- Insert a somewhat empty function into the source file
        strcpy(buf, "{ return 0; }");

        // -- Ensure new function doesn't exist
        MCcall(find_function_info(lrcn, &fi));
        if(fi)
          return 11;

        // -- Create the new resources-load function
        MCcall(mc_mo_get_context_cstr(process_stack, "project-data", true, &data_name));
        sprintf(param, "%s *data", data_name);
        char *pparam = param;
        MCcall(mcs_construct_function_definition(init_source_file, lrcn, "int", 0, 1, &pparam, buf));

        // Make a call to this created function inside the initialize function
        MCcall(mc_mo_get_context_cstr(process_stack, "project-init-function-name", true, &init_function_name));
        MCcall(find_function_info(init_function_name, &init_fi));
        if(!init_fi)
          return 14;

        // TODO -- obtain the local data variable name
        sprintf(buf, "\n  MCcall(%s(data));\n", lrcn);
        MCcall(mcs_attach_code_to_function(init_fi, buf));
      }

      MCcall(mc_mo_set_top_context_cstr(process_stack, "project-load-resources-function", lrcn));
    }
}
> PARAM {
  key=texture-filepath
  obtain=obtain-texture-filepath
    > FILE_DIALOG {
      message=Select the texture file
      initial_filename={CSTR:NULL}
      initial_folder={CSTR:NULL}
      target_context_property=texture-filepath
    }
}
> FUNCTION {
  char lrcn_buf[64], buf[512];
  function_info *fi, *init_fi;
  const char *lrcn, *data_name;

  MCcall(mc_mo_get_context_cstr(process_stack, "project-data", true, &data_name));
  MCcall(mc_mo_get_context_cstr(process_stack, "project-load-resources-function", true, &lrcn));

  // Get the function
  MCcall(find_function_info(lrcn, &fi));
  if(!fi)
    return 12;

  // TODO get the data > PARAM name

  // Get the field name
  const char *tex_fn;
  MCcall(mc_mo_get_context_cstr(process_stack, "tex-field-name", true, &tex_fn));

  // Generate the code
  const char *texfp;
  MCcall(mc_mo_get_context_cstr(process_stack, "texture-filepath", true, &texfp));
  sprintf(buf, "MCcall(mcr_load_texture_resource(\"%s\", &data->%s));\n", texfp, tex_fn);

  // Insert inside the load resources function
  MCcall(mcs_attach_code_to_function(fi, buf));
}
> FUNCTION {
    const char *texfp;
    MCcall(mc_mo_get_context_cstr(process_stack, "texture-filepath", true, &texfp));
    printf("texture-filepath:%s\n", texfp);
}
> FUNCTION {
    puts("NotYetImplemented");
    puts("- ensure the header references render/common.h");
    puts("- insert a field 'mcr_texture_image *bg_texture' into project-data");
    puts("- insert a call to issue texture resource into the project-resource-load-function");
}