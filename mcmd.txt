createClass(Object)
{
  initializeDefault()
}

/*createClass(List)
createAttribute(List,items,array)
createAttribute(List,count,int)
addClassMethod(List,add,void,pointer,item)
addClassMethodCode(List,add,{
  operation($1,+,count,1)
  if(items.length,<=,$1)
  {
    operation($1,+,4,count)
    operation($1,+,count,$1)
    arrayResize(items,$1)
  }
  arraySet(items,count,item)
  operation(count,++)
})

createClass(VisualNode)
createAttribute(VisualNode,name,string)
createAttribute(VisualNode,children,List)
initializeDefault(VisualNode,rootNode,%global)
{
  initializePointer(VisualNode,cmdInt)
  assign($1,children,rootNode)
  invoke($2,add,$1,cmdInt)
}
{
  assign($1,children,rootNode)
  invoke($1,count,$1)
  print("children.size()=")
  print($1)
  printLine(" (should be 1)")
}
*/
/*
addClassMethod(Node,init)
addClassMethodCode(Node,init,{return "rootNode"})

instanceData(VisualNode,root)
{
  assign($1,name,root)
  invoke($2,init,root)
  assign($1,$2)
}
{
  assign($1,name,root)
  print("root.name:")
  printLine($1)
}
*/
/*
bindingInvoke(printCrap,"You ain't seen nothing yet!")
createClass(OpenGLRenderer)
addClassMethod(OpenGLRenderer,renderLoop,void)
addClassMethodCode(OpenGLRenderer,renderLoop,{
  bindingInvoke(runTriangle)
})
initializeDefault(OpenGLRenderer,renderer,%global)
thread("renderthread",renderLoop,renderer)
bindingInvoke(nanosleep,0,5)
*/

/*
  assign(1,shouldExit,thread)
  assignNot($1,$1)
  while($1) {
    invoke(0,sleep,thread,1)
  }
*/